---
// src/pages/v/[videoId].astro
import { Astro } from 'astro:env/server';
import { slugify } from '../../utils/slugify.ts'; // Sesuaikan path jika slugify ada di lokasi lain
import { getAllVideos, type VideoData } from '../../utils/data.ts'; // ⭐ Ambil dari data.ts

// Global variable for processed video data
let videoMap: Map<string, { title: string; slug: string; id: string }>;
let isDataLoaded = false;

// Fungsi untuk memuat dan memproses data video dari getAllVideos()
async function loadVideoData() {
  // Hanya muat sekali
  if (isDataLoaded && videoMap.size > 0) {
    console.log('[Dynamic Page] Data already loaded. Skipping re-initialization.');
    return;
  }

  console.log('[Dynamic Page] STARTING data initialization by calling getAllVideos()...');
  try {
    const allVideos: VideoData[] = await getAllVideos(); // ⭐ Panggil getAllVideos() di sini

    videoMap = new Map();
    allVideos.forEach(video => {
      // Debugging untuk ID spesifik
      if (video.id === '58ov9u7wbc50') {
         console.log(`[Dynamic Page] Processing target video ID: ${video.id}, Title: "${video.title}"`);
      }
      const videoSlug = slugify(video.title);
      videoMap.set(video.id, {
        id: video.id,
        title: video.title,
        slug: videoSlug,
      });
    });

    isDataLoaded = true;
    console.log(`[Dynamic Page] Data video successfully loaded and processed. Total entries in map: ${videoMap.size}`);

    if (videoMap.has('58ov9u7wbc50')) {
      console.log('[Dynamic Page] CONFIRM: ID 58ov9u7wbc50 is PRESENT in videoMap after processing.');
    } else {
      console.log('[Dynamic Page] PROBLEM: ID 58ov9u7wbc50 is NOT present in videoMap after processing.');
    }

  } catch (error) {
    console.error('[Dynamic Page] ERROR loading/processing video data from getAllVideos():', error);
    isDataLoaded = false;
    videoMap = new Map(); // Pastikan map kosong jika ada kegagalan
    // Tidak perlu melempar error, biarkan page redirect ke 404
  }
}

// Handler GET untuk Astro.APIContext
export async function GET(context: Astro.APIContext) {
  const { params, redirect } = context;
  const videoId = params.videoId;

  console.log(`[Dynamic Page] Intercepting GET request for /v/${videoId}`);

  // Muat data jika belum dimuat (akan terjadi pada cold start Worker)
  if (!isDataLoaded) {
    console.log('[Dynamic Page] Data not loaded, attempting to load via loadVideoData()...');
    await loadVideoData(); // Panggil fungsi loadData
    // Jika loadData gagal, isDataLoaded akan tetap false dan videoMap kosong
  }

  // Lookup video info
  const videoInfo = videoMap.get(videoId);

  if (videoInfo) {
    const newPath = `/${videoInfo.slug}-${videoInfo.id}/`;
    console.log(`[Dynamic Page] Video found. REDIRECTING 301 from /v/${videoId} to ${newPath}`);
    return redirect(newPath, 301);
  } else {
    console.warn(`[Dynamic Page] Video with ID "${videoId}" not found in data. Redirecting to /404.`);
    return redirect('/404', 302);
  }
}
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width" />
    <meta http-equiv="refresh" content="0;url=/404" />
    <title>Redirecting...</title>
  </head>
  <body>
    <p>Redirecting you to the correct video page...</p>
    <script>
      // Fallback JS redirect jika server-side redirect gagal
      window.location.replace('/404');
    </script>
  </body>
</html>
